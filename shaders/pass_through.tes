#version 430 core
layout ( triangles, equal_spacing, ccw ) in;

//uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

//inputs
in TCS_OUT
{ 
  vec3 vNormal; 
  vec3 vPosW; 
  vec2 vTexCoords;
} tes_in[]; 


//outputs
out TES_OUT
{ 
  vec3 vNormal; 
  vec3 vPosW; 
  vec2 vTexCoords;
} tes_out; 

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main ()
{
    // pass through texture coordinates from original vertices
    tes_out.vTexCoords = interpolate2D(tes_in[0].vTexCoords, tes_in[1].vTexCoords, tes_in[2].vTexCoords);
    tes_out.vNormal = normalize(interpolate3D(tes_in[0].vNormal, tes_in[1].vNormal, tes_in[2].vNormal));
    tes_out.vPosW = interpolate3D(tes_in[0].vPosW, tes_in[1].vPosW, tes_in[2].vPosW);

    gl_Position = proj * view * model * vec4(tes_out.vPosW, 1.0);
}