#version 430 core
layout ( triangles, equal_spacing, ccw ) in;

//uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;
uniform float uMaxDistanceUV; 

//inputs
in TCS_OUT
{ 
  vec3 vNormal; 
  vec3 vPosW; 
  vec2 vTexCoords;
} tes_in[]; 


//outputs
out TES_OUT
{ 
  vec3 vNormal; 
  vec3 vPosW; 
  vec2 vTexCoords;
} tes_out; 

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec2 BuildTexCoords(vec2 v0, vec2 v1, vec2 v2, float maxDistanceUV)
{
  float texDistance01 = length(v0 - v1);
  float texDistance02 = length(v0 - v2);
  float texDistance12 = length(v1 - v2);

  bool cross01 = texDistance01 > maxDistanceUV;
  bool cross02 = texDistance01 > maxDistanceUV;
  bool cross12 = texDistance01 > maxDistanceUV;
  bool crossAll = texDistance01 > maxDistanceUV && texDistance01 > maxDistanceUV && texDistance01 > maxDistanceUV;

  if (texDistance01 > maxDistanceUV || texDistance02 > maxDistanceUV || texDistance12 > maxDistanceUV)
  {
    if (crossAll)
    {
      return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
    }
    else if (cross01 && cross02) // v0 cross the seam
    {
      if (gl_TessCoord.x < 0.5f)
      {
        return 0.1f * v0 + 0.45f * v1 + 0.45f * v2;
      }
      else
      {
        return 0.9f * v0 + 0.5f * v1 + 0.5f * v2;
      } 

    }

    return vec2(0.0f);

  }


}

void main ()
{
    float maxDistanceUV = uMaxDistanceUV; 
     
    // build values using barycentric coordinates

    // pass through texture coordinates from original vertices
    //if (gl_TessCoord.x == 1.0f || gl_TessCoord.y == 1.0f || gl_TessCoord.z == 1.0f)
    //{
      // interpolate texture coords from barycentric coords
      tes_out.vTexCoords = interpolate2D(tes_in[0].vTexCoords, tes_in[1].vTexCoords, tes_in[2].vTexCoords);
    //}
    //else 
    //{
    //  tes_out.vTexCoords = BuildTexCoords(tes_in[0].vTexCoords, tes_in[1].vTexCoords, tes_in[2].vTexCoords, maxDistanceUV);
    //}
    tes_out.vNormal = normalize(interpolate3D(tes_in[0].vNormal, tes_in[1].vNormal, tes_in[2].vNormal));
    tes_out.vPosW = interpolate3D(tes_in[0].vPosW, tes_in[1].vPosW, tes_in[2].vPosW);

    gl_Position = proj * view * model * vec4(tes_out.vPosW, 1.0);
}